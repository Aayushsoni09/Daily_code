class Node:
  def __init__(self,data):
    self.data=data
    self.prev=None
    self.next=None
class Dll:
  def __init__(self):
    self.head=None

  def display(self):
    temp=self.head
    if temp is None:
      print("empty")
    else:
      while temp:
        print(temp.data," --> ",end="")
        temp=temp.next

  def insert_at_beginning(self,data):
    nb=Node(data)
    temp=self.head
    temp.prev=nb
    nb.next=temp
    self.head=nb
  
  def insert_at_end(self,data):
    ne=Node(data)
    temp=self.head
    while temp.next:
      temp=temp.next
    temp.next=ne
    ne.prev=temp
  def insert_at_position(self,pos,data):
    np=Node(data)
    temp=self.head
    i=0
    for i in range(0,pos-1):
    
      temp=temp.next
    temp.prev.next=np
    np.prev=temp.prev
    temp.prev=np
    np.next=temp
  def delete_from_beginning(self):
    temp=self.head
    self.head=temp.next
    temp.next=None
    self.head.prev=None
  def delete_from_end(self):
    temp=self.head.next
    prev=self.head
    while temp.next:
      temp=temp.next
      prev=prev.next
    temp.prev=None
    prev.next=None
  def delete_from_position(self,pos):
    temp=self.head.next
    prev=self.head
    i=1
    for i in range(1,pos-1):
      temp=temp.next
      prev=prev.next
    prev.next=temp.next
    temp.next.prev=prev
    temp.prev=None
    temp.next=None
  
   
  
l=Dll()        
n1=Node(10)
l.head=n1

n2=Node(20)
n1.next=n2
n2.prev=n1

n3=Node(30)
n2.next=n3
n3.prev=n2

n4=Node(40)
n3.next=n4
n4.prev=n3

n5=Node(50)
n4.next=n5
n5.prev=n4

l.insert_at_beginning(5)
l.insert_at_end(200)
l.insert_at_position(3,25)
l.insert_at_position(5,35)
#l.delete_from_beginning()
l.delete_from_position(3)
#l.delete_from_end()
l.display()
