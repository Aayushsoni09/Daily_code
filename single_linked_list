class Node:
  def __init__(self,data):
    self.data=data
    self.next=None

class Sll:
  def __init__(self):
    self.head=None
  
  #display 
  #we cannot change the head so we will take a temp variable and that will traverse the list
  def display(self):
    temp=self.head
    if temp is None:
      print("empty")
    else:
      while(temp):  
        print(temp.data," --> ",end="")
        temp=temp.next


  def insert_at_beginning(self,data):
    nb=Node(data)
    nb.next=self.head
    self.head=nb


  def insert_at_end(self,data):
    ne=Node(data)
    temp=self.head
    while (temp.next):
      temp=temp.next
    temp.next=ne  

  def insert_at_position(self,pos,data):
    np=Node(data)
    temp=self.head
    i=0
    for i in range(pos-1):
      temp=temp.next
    np.data=data
    np.next=temp.next
    temp.next=np

  def delete_at_beginning(self):
    temp=self.head
    self.head=temp.next
    temp.next=None
  def delete_at_end(self):
    temp=self.head.next
    prev=self.head
    while temp.next:
      temp=temp.next
      prev=prev.next
    prev.next=None  

  def delete_at_position(self,pos):
    temp=self.head.next
    prev=self.head
    i=0
    for i in range(0,pos-1):
      temp=temp.next
      prev=prev.next
    prev.next=temp.next
    temp.next=None


      
mylinkedlist=Sll()
node1=Node(10)

mylinkedlist.head=node1

node2=Node(20)
node1.next=node2

node3=Node(30)
node2.next=node3

mylinkedlist.insert_at_beginning(1)
mylinkedlist.insert_at_end(100)
mylinkedlist.insert_at_position(2,200)
#mylinkedlist.delete_at_beginning()
#mylinkedlist.delete_at_end()
#mylinkedlist.delete_at_position(2)
mylinkedlist.display()
